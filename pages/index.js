import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useEffect, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Link from "next/link";
import { useRouter } from "next/router";
import {getCookie, setCookie, getCookies, deleteCookie} from 'cookies-next';

const Login = () => {
  const [tasks, setTasks] = useState([]);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const router = useRouter();
  

    useEffect(() => {
      if(localStorage.getItem('connectedUser'))
    {
      if(localStorage.getItem('connectedUser').accountType === 2){
        router.push('/tasks');
      }
      
      if(localStorage.getItem('connectedUser').accountType === 1){
        router.push('/Staffs/mytasks');
      }
    }
    else{
      router.push('/');
    }
    }, []);
    

  useEffect(() => {
    const connectedUser = JSON.parse(localStorage.getItem('connectedUser'));

    const fetchTasks = async () => {
      let allTasks = await fetch(
        `${process.env.NEXT_PUBLIC_HOST}/api/Tasks/getAllTasks`,
        {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        }
      );

      let response = await allTasks.json();
      console.log("The Response of FetchTasks: ", response.result);
      setTasks(response.result);
    };

    // Function call
    fetchTasks();
  }, []);

  const handleChange = (e) => {
    if (e.target.name == 'username') setUsername(e.target.value);
    if (e.target.name == 'password') setPassword(e.target.value);
  }

  const handleSubmit = async (e) => {
    e.preventDefault();
    const data = { username, password };

    // fetch(''); // Fetch() API
    let result = await fetch(`${process.env.NEXT_PUBLIC_HOST}/api/Users/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    let response = await result.json();

    setUsername('');
    setPassword('');
    if (response.success) {
      localStorage.setItem("connectedUser", JSON.stringify({token: response.token, email: response.email, username: response.username, accountType: response.accountType }));
      setCookie("connectedUser", response.token);
      setCookie("accountType", response.accountType);
      
      toast.success("Vous êtes connectés avec succès!", {
        position: "top-center",
        autoClose: 2000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });

      if(response.accountType === 1){
        setTimeout(() => {
          router.push(`${process.env.NEXT_PUBLIC_HOST}/Staffs/`);
        }, 4000);
      }
      else if(response.accountType === 2){
        setTimeout(() => {
          router.push(`${process.env.NEXT_PUBLIC_HOST}/Director/`);
        }, 4000);
      }      
      else if(response.accountType === 3){
        setTimeout(() => {
          router.push(`${process.env.NEXT_PUBLIC_HOST}/Admin/`);
        }, 4000);
      }      
      else{
        setTimeout(() => {
          router.push(`${process.env.NEXT_PUBLIC_HOST}/`);
        }, 4000);

      }

    } else {
      toast.error(response.error, {
        position: "top-center",
        autoClose: 2000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Gestion d&apos;Assignation de Tâches</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <main className={styles.main}>
        <ToastContainer
          position="top-center"
          autoClose={2000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
        />
        <h2 className="fs-1 fw-bold">Connexion</h2>

        <div className="mt-4 p-2 rounded-3 col-md-5 bg-dark bg-gradiant text-white">
          <form method="POST" onSubmit={handleSubmit}>
            <div className="mb-3">
              <label htmlFor="exampleInputEmail1" className="form-label">
                Adresse email:
              </label>
              <input
                onChange={handleChange}
                type="email"
                name="username"
                className="form-control"
                id="exampleInputEmail1"
                aria-describedby="emailHelp"
                value={username}
                required
              />
            </div>
            <div className="mb-3">
              <label htmlFor="exampleInputPassword1" className="form-label">
                Mot de passe:
              </label>
              <input
                onChange={handleChange}
                type="password"
                name="password"
                className="form-control"
                id="exampleInputPassword1"
                value={password}
                required
              />
            </div>
            <Link href={`${process.env.NEXT_PUBLIC_HOST}/forgotPassword`}>
              <div className="mb-3 form-check float-end">
                <label className="btn btn-xs btn-warning form-check-label" htmlFor="exampleCheck1">
                  Mot de Passe oublié?
                </label>
              </div>
            </Link>
            <button type="submit" className="btn btn-primary">
            <i className="bi bi-box-arrow-in-right"></i> Se connecter
            </button>
          </form>
        </div>
      </main>
    </div>
  );
}

export default Login;
